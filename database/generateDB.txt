-- Create the database
CREATE DATABASE IF NOT EXISTS project_management;
USE project_management;

-- Create the setting table
CREATE TABLE setting (
    setting_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    value TEXT,
    type_id INT,
    priority INT,
    status ENUM('active', 'inactive') DEFAULT 'active',
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT
);

-- Create the user_roles table
CREATE TABLE user_roles (
    role_id INT PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(50) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT
);

-- Create the departments table
CREATE TABLE departments (
    dept_id INT PRIMARY KEY AUTO_INCREMENT,
    dept_name VARCHAR(100) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT
);

-- Create the project_roles table
CREATE TABLE project_roles (
    role_id INT PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(50) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT
);

-- Create the requirement_complexity table
CREATE TABLE requirement_complexity (
    complexity_id INT PRIMARY KEY AUTO_INCREMENT,
    complexity_name VARCHAR(50) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT
);

-- Create the requirement_status table
CREATE TABLE requirement_status (
    status_id INT PRIMARY KEY AUTO_INCREMENT,
    status_name VARCHAR(50) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT
);

-- Create the issue_types table
CREATE TABLE issue_types (
    type_id INT PRIMARY KEY AUTO_INCREMENT,
    type_name VARCHAR(50) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT
);

-- Create the user table
CREATE TABLE user (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    full_name VARCHAR(255) NOT NULL,
    user_name VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    mobile VARCHAR(20),
    password VARCHAR(255) NOT NULL,
    role_id INT,
    status ENUM('active', 'inactive', 'unverified') DEFAULT 'unverified',
    note TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (role_id) REFERENCES user_roles(role_id)
);

-- Create the project table
CREATE TABLE project (
    project_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    code VARCHAR(50) NOT NULL UNIQUE,
    start_date DATE,
    end_date DATE,
    dept_id INT,
    status ENUM('pending', 'in-progress', 'closed', 'cancelled') DEFAULT 'pending',
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);

-- Create the allocation table
CREATE TABLE allocation (
    allocation_id INT PRIMARY KEY AUTO_INCREMENT,
    member_id INT,
    project_id INT,
    role_id INT,
    from_date DATE,
    to_date DATE,
    effort FLOAT,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (member_id) REFERENCES user(user_id),
    FOREIGN KEY (project_id) REFERENCES project(project_id),
    FOREIGN KEY (role_id) REFERENCES project_roles(role_id)
);

-- Create the requirement table
CREATE TABLE requirement (
    req_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    owner_id INT,
    complexity_id INT,
    status_id INT,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (owner_id) REFERENCES user(user_id),
    FOREIGN KEY (complexity_id) REFERENCES requirement_complexity(complexity_id),
    FOREIGN KEY (status_id) REFERENCES requirement_status(status_id)
);

-- Create the issue table
CREATE TABLE issue (
    issue_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    type_id INT,
    req_id INT,
    assigner_id INT,
    assignee_id INT,
    deadline DATE,
    status ENUM('pending', 'to do', 'doing', 'done', 'closed') DEFAULT 'pending',
    status_date TIMESTAMP,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (type_id) REFERENCES issue_types(type_id),
    FOREIGN KEY (req_id) REFERENCES requirement(req_id),
    FOREIGN KEY (assigner_id) REFERENCES user(user_id),
    FOREIGN KEY (assignee_id) REFERENCES user(user_id)
);

-- Add foreign key constraints for created_by_id and updated_by_id
ALTER TABLE setting ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE setting ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE user_roles ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE user_roles ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE departments ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE departments ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE project_roles ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE project_roles ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE requirement_complexity ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE requirement_complexity ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE requirement_status ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE requirement_status ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE issue_types ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE issue_types ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE user ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE user ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE project ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE project ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE allocation ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE allocation ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE requirement ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE requirement ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

ALTER TABLE issue ADD FOREIGN KEY (created_by_id) REFERENCES user(user_id);
ALTER TABLE issue ADD FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

-- Insert data into user_roles
INSERT INTO user_roles (role_name, description) VALUES
('Admin', 'Administrator with full access'),
('Project Manager', 'Manages projects and teams'),
('Developer', 'Develops and maintains software'),
('Tester', 'Performs software testing');

-- Insert data into departments
INSERT INTO departments (dept_name, description) VALUES
('IT', 'Information Technology Department'),
('HR', 'Human Resources Department'),
('Finance', 'Finance and Accounting Department'),
('Marketing', 'Marketing and Sales Department');

-- Insert data into project_roles
INSERT INTO project_roles (role_name, description) VALUES
('Project Lead', 'Leads the project team'),
('Developer', 'Develops project features'),
('Tester', 'Tests project features'),
('Designer', 'Designs user interface');

-- Insert data into requirement_complexity
INSERT INTO requirement_complexity (complexity_name, description) VALUES
('Low', 'Simple requirement, easy to implement'),
('Medium', 'Moderate complexity, requires some effort'),
('High', 'Complex requirement, significant effort needed');

-- Insert data into requirement_status
INSERT INTO requirement_status (status_name, description) VALUES
('New', 'Newly created requirement'),
('In Progress', 'Requirement is being worked on'),
('Review', 'Requirement is under review'),
('Done', 'Requirement is completed');

-- Insert data into issue_types
INSERT INTO issue_types (type_name, description) VALUES
('Bug', 'Software defect'),
('Feature', 'New feature request'),
('Enhancement', 'Improvement to existing feature'),
('Task', 'General task');

-- Insert data into user
INSERT INTO user (full_name, user_name, email, mobile, password, role_id, status) VALUES
('John Doe', 'johndoe', 'john@example.com', '1234567890', 'hashed_password', 1, 'active'),
('Jane Smith', 'janesmith', 'jane@example.com', '0987654321', 'hashed_password', 2, 'active'),
('Bob Johnson', 'bobjohnson', 'bob@example.com', '1122334455', 'hashed_password', 3, 'active'),
('Alice Brown', 'alicebrown', 'alice@example.com', '5544332211', 'hashed_password', 4, 'active');

-- Insert data into project
INSERT INTO project (name, code, start_date, end_date, dept_id, status, description) VALUES
('E-commerce Platform', 'ECOM001', '2024-01-01', '2024-12-31', 1, 'in-progress', 'Building a new e-commerce platform'),
('HR Management System', 'HRMS001', '2024-02-01', '2024-08-31', 2, 'pending', 'Developing an HR management system'),
('Financial Reporting Tool', 'FIN001', '2024-03-01', '2024-09-30', 3, 'in-progress', 'Creating a financial reporting tool');

-- Insert data into allocation
INSERT INTO allocation (member_id, project_id, role_id, from_date, to_date, effort, description) VALUES
(1, 1, 1, '2024-01-01', '2024-12-31', 100, 'Project lead for E-commerce Platform'),
(2, 1, 2, '2024-01-01', '2024-12-31', 80, 'Developer for E-commerce Platform'),
(3, 2, 1, '2024-02-01', '2024-08-31', 100, 'Project lead for HR Management System'),
(4, 2, 3, '2024-02-01', '2024-08-31', 60, 'Tester for HR Management System');

-- Insert data into requirement
INSERT INTO requirement (title, owner_id, complexity_id, status_id, description) VALUES
('User Authentication', 1, 2, 2, 'Implement user authentication system'),
('Product Catalog', 2, 3, 1, 'Create product catalog with search and filter options'),
('Employee Onboarding', 3, 2, 2, 'Develop employee onboarding workflow'),
('Financial Reports', 4, 3, 1, 'Generate monthly and yearly financial reports');

-- Insert data into issue
INSERT INTO issue (title, type_id, req_id, assigner_id, assignee_id, deadline, status, status_date, description) VALUES
('Login page not responsive', 1, 1, 1, 2, '2024-02-15', 'doing', '2024-01-20', 'Login page is not displaying correctly on mobile devices'),
('Add sorting to product list', 2, 2, 2, 3, '2024-03-31', 'to do', '2024-01-25', 'Implement sorting functionality for product catalog'),
('Onboarding email not sending', 1, 3, 3, 4, '2024-02-28', 'pending', '2024-02-05', 'Automated onboarding email is not being sent to new employees'),
('Incorrect calculation in yearly report', 1, 4, 4, 1, '2024-03-15', 'done', '2024-03-10', 'Fixed incorrect calculation in yearly financial report');

UPDATE setting SET created_by_id = 1, updated_by_id = 1 WHERE setting_id > 0;
UPDATE user_roles SET created_by_id = 1, updated_by_id = 1 WHERE role_id > 0;
UPDATE departments SET created_by_id = 1, updated_by_id = 1 WHERE dept_id > 0;
UPDATE project_roles SET created_by_id = 1, updated_by_id = 1 WHERE role_id > 0;
UPDATE requirement_complexity SET created_by_id = 1, updated_by_id = 1 WHERE complexity_id > 0;
UPDATE requirement_status SET created_by_id = 1, updated_by_id = 1 WHERE status_id > 0;
UPDATE issue_types SET created_by_id = 1, updated_by_id = 1 WHERE type_id > 0;
UPDATE user SET created_by_id = 1, updated_by_id = 1 WHERE user_id > 0;
UPDATE project SET created_by_id = 1, updated_by_id = 1 WHERE project_id > 0;
UPDATE allocation SET created_by_id = 1, updated_by_id = 1 WHERE allocation_id > 0;
UPDATE requirement SET created_by_id = 1, updated_by_id = 1 WHERE req_id > 0;
UPDATE issue SET created_by_id = 1, updated_by_id = 1 WHERE issue_id > 0;